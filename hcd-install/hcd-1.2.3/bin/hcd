#!/bin/sh
trap "exit 1" USR1
export HCD_SCRIPT_PID=$$

if [ -z "$BASH_VERSION" ]; then
    exec bash "$0" "$@"
    exit 1  # Will only get here if exec itself fails to run
fi

set -f

MAYBE_NODEID=$1

# shortcut HCD multi-instance server node commands
# This script will accept both node1 and hcd-node1 as NODEID
for NODEID_PREFIX in "" "hcd-"; do
    NODEID=${NODEID_PREFIX}${MAYBE_NODEID}
    if [ -f /etc/hcd/serverconfig/$NODEID ]; then
        . /etc/hcd/serverconfig/$NODEID
        shift
        break
    fi
done

set +f

# Absolute path to this script
export HCD_SCRIPT="$(cd "`dirname "$0"`"; pwd)/hcd"

printUsage() {
    echo "$0:"
    echo "usage: hcd [-f <config file> -u <username> -p <password> -a <jmx_username> -b <jmx_password>] <command> [command-args]"
    echo ""
    echo "Available commands:"
    echo "  cassandra                       run HCD server"
    echo "  cassandra-stop                  stop HCD server"
    echo "  cqlsh                           run cqlsh command"
    echo "  nodetool                        run nodetool command"
    echo "  -v                              print HCD version"
    echo_extensions

    echo ""
    exit 1
}

#parse HCD options, pass command to parseArgs()
parsedArgs=0

parseOptions() {
  case $1 in
    -u)
        shift
        export ds_username="$1"
        shift
        parseOptions "$@"
        ;;
    -p)
        shift
        export ds_password="$1"
        shift
        parseOptions "$@"
        ;;
    -a)
        shift
        export ds_jmx_username="$1"
        shift
        parseOptions "$@"
        ;;
    -b)
        shift
        export ds_jmx_password="$1"
        shift
        parseOptions "$@"
        ;;
    -f)
        shift
        export HCDRC_FILE="$1"
        shift
        parseOptions "$@"
        ;;
    *)
        return
        ;;
  esac
  parsedArgs=`expr $parsedArgs + 2`
}

# A list of commands which do not require all classpath items
# This speeds up startup by 0.2~0.3 seconds (it is visible)
case $1 in
  nodetool|cqlsh|"")
    export HCD_TOOL=1
    ;;
  *)
    ;;
esac

parseOptions "$@"
shift $parsedArgs

if [ -z "$HCD_ENV" ]; then
    for include in "$HOME/.hcd-env.sh" \
                   "`dirname "$0"`/hcd-env.sh" \
                   "/etc/hcd/hcd-env.sh"; do
        if [ -r "$include" ]; then
            HCD_ENV="$include"
            break
        fi
    done
fi

if [ -z "$HCD_ENV" ]; then
    echo "HCD_ENV could not be determined."
    exit 1
elif [ -r "$HCD_ENV" ]; then
    . "$HCD_ENV"
else
    echo "Location pointed by HCD_ENV not readable: $HCD_ENV"
    exit 1
fi

export HCD_ENV_LOADED=1

if [ -z $CASSANDRA_ENV_FILE ]; then
    if [ -f "$HCD_HOME/resources/cassandra/conf/cassandra-env.sh" ]; then
        CASSANDRA_ENV_FILE=$HCD_HOME/resources/cassandra/conf/cassandra-env.sh
    else
        if [ -f "/etc/hcd/cassandra/cassandra-env.sh" ]; then
            CASSANDRA_ENV_FILE=/etc/hcd/cassandra/cassandra-env.sh
        else
            CASSANDRA_ENV_FILE=cassandra-env.sh
        fi
    fi
fi

CASSANDRA_JMX_PORT="$(get_jmx_port)"

export CASSANDRA_ENV_LOADED=1

# if JMX_PORT is not set in environment, we use the port from cassandra-env.sh
if [ "x$JMX_PORT" = "x" ]; then
    JMX_PORT=$CASSANDRA_JMX_PORT
fi

export JMX_PORT

BIN="`dirname $0`"

##################################### HCD Plugins/Extension Functions ####################################
# determine HCD extensions location
if [ -z "$EXT_HOME" ]; then
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    for dir in "$HCD_HOME/resources/hcd/ext" \
                   "$HCD_HOME/ext" \
                   "$DIR/../resources/hcd/ext" \
                   "$DIR/../ext"; do
        if [ -d "$dir" ]; then
            EXT_HOME="$dir"
            break
        fi
    done
fi

exist_extension_script(){
   if [ -f "$EXT_HOME/hcd-ext-$1" ]; then
      return 0
   else
      return 1
   fi
}


#### Runs an extension, returns 1 if the extension script could not be found
#### usage run_extension extension-name args
#### extension-name will run a script hcd-ext-${extension-name}
run_extension(){
    export HCD_ENV
    SCRIPT_NAME="$1"

    exist_extension_script $SCRIPT_NAME
    if [ "$?" -ne 0 ]; then
      return 1;
    fi

    set_credentials
    "$EXT_HOME/hcd-ext-$SCRIPT_NAME" ${@:2}

    return $?
}

echo_extensions(){
    pattern="hcd-ext-*"
    extensions=$(find ${EXT_HOME} -name "$pattern")
    for file in ${extensions};
    do
        fileName=$(basename $file)
        extensionName="${fileName#hcd-ext-}"
        extensionTitle=`grep -oe "TITLE:.*" $file | cut -d':' -f2-`
        printf "  %-31s %s\n" "$extensionName" "$extensionTitle"
    done
}

#########################################################################################################

HCD_SERVER_FLAG=hcd.server_process

parseArgs() {
  CASSANDRA_EXTRA_ARGS=

exit1() {
  kill -USR1 $HCD_SCRIPT_PID
}

checkHome() {
  if [ -z "$HOME" ]; then
    echo "User home directory is not set. Please set HOME to an existing directory and try again."
    exit1
  fi
  if [ ! -d "$HOME" ]; then
    echo "User home is set to $HOME but that directory does not exist. Please create user home directory and try again."
    exit1
  fi
  if [ ! -w "$HOME" ]; then
    echo "User home is set to $HOME but the current user cannot create files there. Please setup user home directory properly and try again."
    exit1
  fi
}

case "$1" in
    cassandra)
        shift
        set_credentials
        case "`uname`" in
            CYGWIN*)
                JAVA_LIBRARY_PATH=`cygpath -p -w "$JAVA_LIBRARY_PATH"`
            ;;
        esac

        export lower_heap_limit_in_mb="1024"
        export higher_heap_limit_in_mb="8192"

        export JVM_OPTS="-D$HCD_SERVER_FLAG $JVM_OPTS"
        exec "$CASSANDRA_BIN"/cassandra "$@" $CASSANDRA_EXTRA_ARGS
        # Should not be reached
        exit 1
        ;;
    cassandra-stop)
        shift
        set_credentials
        STOP_SWITCH=$1
        PID=""

        case "$STOP_SWITCH" in
            "-p")
                shift
                PID=$1
                ;;
        esac
        if [ "x$PID" = "x" ]; then
            PID=`ps -ww -ef| egrep "java.*hcd-core" | grep -v /etc/hcd- | grep $HCD_SERVER_FLAG | grep -v grep |awk '{print $2}' 2> /dev/null`;
        fi
        if [ "x$PID" = "x" ]; then
            PID=`ps -edaf| egrep "java.*hcd-core" | grep -v /etc/hcd- | grep $HCD_SERVER_FLAG | grep -v grep |awk '{print $2}' 2> /dev/null`;
        fi
        if [ "x$PID" = "x" ]; then
            PID=`ps aux|grep java| grep $HCD_SERVER_FLAG | grep -v grep | awk '{print $2}' 2> /dev/null`;
        fi
        if [ "x$PID" = "x" ]; then
            echo "Unable to find HCD process, please use -p if you are sure it's running."
            exit -1
        else
            # Found 1+ PID(s). Let's see if it's just 1 or more.
            MAYBE_PIDS=`echo $PID | tr -d [:blank:]`

            if [[ ! $MAYBE_PIDS = $PID ]]; then
                echo "Found more than one HCD process, please use -p to specify which one you'd like to stop."
                exit -1
            fi

            NODETOOL_BIN=nodetool
            if [ -x "$CASSANDRA_BIN"/nodetool ]; then
                NODETOOL_BIN="$CASSANDRA_BIN"/nodetool
            else
                if [ -x /usr/bin/nodetool ]; then
                    NODETOOL_BIN=/usr/bin/nodetool
                else
                    if [ -x $HCD_HOME/bin/nodetool ]; then
                        NODETOOL_BIN=$HCD_HOME/bin/nodetool
                    else
                        if [ -x $BIN/nodetool ]; then
                            NODETOOL_BIN=$BIN/nodetool
                        fi
                    fi
                fi
            fi
            # We check the call was successful here just to see if we got the
            # right JMX info (creds, port, etc.)
            if [ $? = 0 ]; then
                $NODETOOL_BIN $CASSANDRA_JMX_CREDENTIALS disablebinary
                $NODETOOL_BIN $CASSANDRA_JMX_CREDENTIALS drain

                # try to check if PID is alive 36 times. This leads to a maximum
                # of 3min wait in the worst case (36 * 5s = 180s)
                local KILL_RETRIES=36;
                local SERVICE_STOPPED=1;

                kill $PID

                for try in `seq $KILL_RETRIES`; do
                    if [ ! -d /proc/$PID/ ]; then
                        SERVICE_STOPPED=0;
                        break;
                    fi

                    sleep 5
                done
            fi

            if [ $SERVICE_STOPPED -ne 0 ]; then
                echo "WARNING: couldn't kill process $PID after $KILL_RETRIES attempts. Please double check if it's still running."
            fi

            exit $?
        fi
        ;;
    nodetool)
        shift
        set_credentials
        # Nodetool needs the full set of HCD libs on the classpath
        # as since 1.2.11 the configured snitch is loaded by a call
        # to DatabaseDescriptor.init in describe_ring
        CLASSPATH="$HCD_CLASSPATH":"$CASSANDRA_CLASSPATH"
        if [ -x "$CASSANDRA_BIN"/nodetool ]; then
            exec "$CASSANDRA_BIN"/nodetool $CASSANDRA_JMX_CREDENTIALS "$@"
        elif [ -x /usr/bin/nodetool ]; then
            exec /usr/bin/nodetool $CASSANDRA_JMX_CREDENTIALS "$@"
        else
            echo "Unable to locate nodetool in $CASSANDRA_BIN or /usr/bin"
            exit 2
        fi
        exit $?
        ;;
    cqlsh)
        shift
        set_credentials
        CLASSPATH="$HCD_CLASSPATH":"$CASSANDRA_CLASSPATH"
        if [ -x "$CASSANDRA_BIN"/cqlsh ]; then
            exec "$CASSANDRA_BIN"/cqlsh $CASSANDRA_JMX_CREDENTIALS "$@"
        elif [ -x /usr/bin/cqlsh ]; then
            exec /usr/bin/cqlsh $CASSANDRA_JMX_CREDENTIALS "$@"
        else
            echo "Unable to locate cqlsh in $CASSANDRA_BIN or /usr/bin"
            exit 2
        fi
        exit $?
        ;;
    -v)
        "$JAVA" -cp "$CLASSPATH" -Dlogback.configurationFile=logback-tools.xml com.datastax.bdp.tools.GetVersion
        exit $?
        ;;
    *)
        ######################################## HCD Plugins/Extensions Integration ####################################################################
        ########################### If any command in the current directory with name hcd-ext-<$2> this command is executed ############################
        exist_extension_script $1
        if [ "$?" -eq 0 ]; then
            run_extension $@
            exit "$?"
        else
            printUsage
        fi
esac
}

parseArgs "$@"

# vi:ai sw=4 ts=4 tw=0 et
